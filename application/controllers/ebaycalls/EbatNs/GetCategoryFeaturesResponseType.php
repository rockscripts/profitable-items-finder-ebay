<?php
// autogenerated file 29.12.2011 15:00
// $Id: $
// $Log: $
//
//
require_once 'FeatureDefinitionsType.php';
require_once 'SiteDefaultsType.php';
require_once 'AbstractResponseType.php';
require_once 'CategoryFeatureType.php';

/**
 *  
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/GetCategoryFeaturesResponseType.html
 *
 */
class GetCategoryFeaturesResponseType extends AbstractResponseType
{
	/**
	 * @var string
	 */
	protected $CategoryVersion;
	/**
	 * @var dateTime
	 */
	protected $UpdateTime;
	/**
	 * @var CategoryFeatureType
	 */
	protected $Category;
	/**
	 * @var SiteDefaultsType
	 */
	protected $SiteDefaults;
	/**
	 * @var FeatureDefinitionsType
	 */
	protected $FeatureDefinitions;

	/**
	 * @return string
	 */
	function getCategoryVersion()
	{
		return $this->CategoryVersion;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setCategoryVersion($value)
	{
		$this->CategoryVersion = $value;
	}
	/**
	 * @return dateTime
	 */
	function getUpdateTime()
	{
		return $this->UpdateTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setUpdateTime($value)
	{
		$this->UpdateTime = $value;
	}
	/**
	 * @return CategoryFeatureType
	 * @param integer $index 
	 */
	function getCategory($index = null)
	{
		if ($index !== null) {
			return $this->Category[$index];
		} else {
			return $this->Category;
		}
	}
	/**
	 * @return void
	 * @param CategoryFeatureType $value 
	 * @param  $index 
	 */
	function setCategory($value, $index = null)
	{
		if ($index !== null) {
			$this->Category[$index] = $value;
		} else {
			$this->Category = $value;
		}
	}
	/**
	 * @return void
	 * @param CategoryFeatureType $value 
	 */
	function addCategory($value)
	{
		$this->Category[] = $value;
	}
	/**
	 * @return SiteDefaultsType
	 */
	function getSiteDefaults()
	{
		return $this->SiteDefaults;
	}
	/**
	 * @return void
	 * @param SiteDefaultsType $value 
	 */
	function setSiteDefaults($value)
	{
		$this->SiteDefaults = $value;
	}
	/**
	 * @return FeatureDefinitionsType
	 */
	function getFeatureDefinitions()
	{
		return $this->FeatureDefinitions;
	}
	/**
	 * @return void
	 * @param FeatureDefinitionsType $value 
	 */
	function setFeatureDefinitions($value)
	{
		$this->FeatureDefinitions = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('GetCategoryFeaturesResponseType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'CategoryVersion' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'UpdateTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'Category' =>
					array(
						'required' => false,
						'type' => 'CategoryFeatureType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => true,
						'cardinality' => '0..*'
					),
					'SiteDefaults' =>
					array(
						'required' => false,
						'type' => 'SiteDefaultsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'FeatureDefinitions' =>
					array(
						'required' => false,
						'type' => 'FeatureDefinitionsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
