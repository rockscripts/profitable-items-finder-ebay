<?php
// autogenerated file 29.12.2011 15:00
// $Id: $
// $Log: $
//
//
require_once 'MaximumItemRequirementsType.php';
require_once 'VerifiedUserRequirementsType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'MaximumBuyerPolicyViolationsType.php';
require_once 'MaximumUnpaidItemStrikesInfoType.php';

/**
 * New Container for all buyer requirements in listing calls. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/BuyerRequirementDetailsType.html
 *
 */
class BuyerRequirementDetailsType extends EbatNs_ComplexType
{
	/**
	 * @var boolean
	 */
	protected $ShipToRegistrationCountry;
	/**
	 * @var boolean
	 */
	protected $ZeroFeedbackScore;
	/**
	 * @var int
	 */
	protected $MinimumFeedbackScore;
	/**
	 * @var MaximumItemRequirementsType
	 */
	protected $MaximumItemRequirements;
	/**
	 * @var boolean
	 */
	protected $LinkedPayPalAccount;
	/**
	 * @var VerifiedUserRequirementsType
	 */
	protected $VerifiedUserRequirements;
	/**
	 * @var MaximumUnpaidItemStrikesInfoType
	 */
	protected $MaximumUnpaidItemStrikesInfo;
	/**
	 * @var MaximumBuyerPolicyViolationsType
	 */
	protected $MaximumBuyerPolicyViolations;

	/**
	 * @return boolean
	 */
	function getShipToRegistrationCountry()
	{
		return $this->ShipToRegistrationCountry;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setShipToRegistrationCountry($value)
	{
		$this->ShipToRegistrationCountry = $value;
	}
	/**
	 * @return boolean
	 */
	function getZeroFeedbackScore()
	{
		return $this->ZeroFeedbackScore;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setZeroFeedbackScore($value)
	{
		$this->ZeroFeedbackScore = $value;
	}
	/**
	 * @return int
	 */
	function getMinimumFeedbackScore()
	{
		return $this->MinimumFeedbackScore;
	}
	/**
	 * @return void
	 * @param int $value 
	 */
	function setMinimumFeedbackScore($value)
	{
		$this->MinimumFeedbackScore = $value;
	}
	/**
	 * @return MaximumItemRequirementsType
	 */
	function getMaximumItemRequirements()
	{
		return $this->MaximumItemRequirements;
	}
	/**
	 * @return void
	 * @param MaximumItemRequirementsType $value 
	 */
	function setMaximumItemRequirements($value)
	{
		$this->MaximumItemRequirements = $value;
	}
	/**
	 * @return boolean
	 */
	function getLinkedPayPalAccount()
	{
		return $this->LinkedPayPalAccount;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setLinkedPayPalAccount($value)
	{
		$this->LinkedPayPalAccount = $value;
	}
	/**
	 * @return VerifiedUserRequirementsType
	 */
	function getVerifiedUserRequirements()
	{
		return $this->VerifiedUserRequirements;
	}
	/**
	 * @return void
	 * @param VerifiedUserRequirementsType $value 
	 */
	function setVerifiedUserRequirements($value)
	{
		$this->VerifiedUserRequirements = $value;
	}
	/**
	 * @return MaximumUnpaidItemStrikesInfoType
	 */
	function getMaximumUnpaidItemStrikesInfo()
	{
		return $this->MaximumUnpaidItemStrikesInfo;
	}
	/**
	 * @return void
	 * @param MaximumUnpaidItemStrikesInfoType $value 
	 */
	function setMaximumUnpaidItemStrikesInfo($value)
	{
		$this->MaximumUnpaidItemStrikesInfo = $value;
	}
	/**
	 * @return MaximumBuyerPolicyViolationsType
	 */
	function getMaximumBuyerPolicyViolations()
	{
		return $this->MaximumBuyerPolicyViolations;
	}
	/**
	 * @return void
	 * @param MaximumBuyerPolicyViolationsType $value 
	 */
	function setMaximumBuyerPolicyViolations($value)
	{
		$this->MaximumBuyerPolicyViolations = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('BuyerRequirementDetailsType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'ShipToRegistrationCountry' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ZeroFeedbackScore' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MinimumFeedbackScore' =>
					array(
						'required' => false,
						'type' => 'int',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MaximumItemRequirements' =>
					array(
						'required' => false,
						'type' => 'MaximumItemRequirementsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'LinkedPayPalAccount' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'VerifiedUserRequirements' =>
					array(
						'required' => false,
						'type' => 'VerifiedUserRequirementsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MaximumUnpaidItemStrikesInfo' =>
					array(
						'required' => false,
						'type' => 'MaximumUnpaidItemStrikesInfoType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MaximumBuyerPolicyViolations' =>
					array(
						'required' => false,
						'type' => 'MaximumBuyerPolicyViolationsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
